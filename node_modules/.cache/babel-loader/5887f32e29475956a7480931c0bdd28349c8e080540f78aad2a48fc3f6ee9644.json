{"ast":null,"code":"import Dexie from 'dexie';\n\n// 创建数据库实例\nconst db = new Dexie('MoneyTrackerDB');\n\n// 定义数据库模式\ndb.version(1).stores({\n  transactions: '++id, type, amount, category, date, description',\n  categories: '++id, type, name'\n});\n\n// 定义交易类型常量\nexport const TRANSACTION_TYPES = {\n  INCOME: '收入',\n  EXPENSE: '支出'\n};\n\n// 预定义的收入类别\nexport const DEFAULT_INCOME_CATEGORIES = ['工资', '奖金', '投资收益', '兼职', '礼金', '报销', '其他收入'];\n\n// 预定义的支出类别\nexport const DEFAULT_EXPENSE_CATEGORIES = ['饮食', '住房', '交通', '购物', '娱乐', '医疗', '教育', '旅游', '数码', '生活用品', '其他支出'];\n\n// 初始化类别数据\nexport const initCategories = async () => {\n  const count = await db.categories.count();\n  if (count === 0) {\n    // 如果没有类别数据，添加默认类别\n    const categoriesToAdd = [...DEFAULT_INCOME_CATEGORIES.map(name => ({\n      type: TRANSACTION_TYPES.INCOME,\n      name\n    })), ...DEFAULT_EXPENSE_CATEGORIES.map(name => ({\n      type: TRANSACTION_TYPES.EXPENSE,\n      name\n    }))];\n    await db.categories.bulkAdd(categoriesToAdd);\n  }\n};\n\n// 在应用启动时初始化类别\ninitCategories();\n\n// 类别管理函数\nexport const getAllCategories = async () => {\n  return await db.categories.toArray();\n};\nexport const getCategoriesByType = async type => {\n  return await db.categories.where('type').equals(type).toArray();\n};\nexport const addCategory = async category => {\n  return await db.categories.add(category);\n};\nexport const updateCategory = async (id, name) => {\n  return await db.categories.update(id, {\n    name\n  });\n};\nexport const deleteCategory = async id => {\n  // 检查该类别是否被使用\n  const transactionCount = await db.transactions.where('category').equals((await db.categories.get(id)).name).count();\n  if (transactionCount > 0) {\n    throw new Error('此类别已被使用，无法删除');\n  }\n  return await db.categories.delete(id);\n};\n\n// 数据库操作函数\nexport const addTransaction = async transaction => {\n  // 确保日期是Date对象\n  if (typeof transaction.date === 'string') {\n    transaction.date = new Date(transaction.date);\n  }\n  return await db.transactions.add(transaction);\n};\nexport const updateTransaction = async (id, changes) => {\n  // 确保日期是Date对象\n  if (changes.date && typeof changes.date === 'string') {\n    changes.date = new Date(changes.date);\n  }\n  return await db.transactions.update(id, changes);\n};\nexport const deleteTransaction = async id => {\n  return await db.transactions.delete(id);\n};\nexport const getAllTransactions = async () => {\n  return await db.transactions.toArray();\n};\nexport const getTransactionsByType = async type => {\n  return await db.transactions.where('type').equals(type).toArray();\n};\nexport const getTransactionsByDateRange = async (startDate, endDate) => {\n  return await db.transactions.where('date').between(startDate, endDate).toArray();\n};\nexport const getTransactionById = async id => {\n  return await db.transactions.get(id);\n};\nexport default db;","map":{"version":3,"names":["Dexie","db","version","stores","transactions","categories","TRANSACTION_TYPES","INCOME","EXPENSE","DEFAULT_INCOME_CATEGORIES","DEFAULT_EXPENSE_CATEGORIES","initCategories","count","categoriesToAdd","map","name","type","bulkAdd","getAllCategories","toArray","getCategoriesByType","where","equals","addCategory","category","add","updateCategory","id","update","deleteCategory","transactionCount","get","Error","delete","addTransaction","transaction","date","Date","updateTransaction","changes","deleteTransaction","getAllTransactions","getTransactionsByType","getTransactionsByDateRange","startDate","endDate","between","getTransactionById"],"sources":["D:/money-tracker/src/db.js"],"sourcesContent":["import Dexie from 'dexie';\r\n\r\n// 创建数据库实例\r\nconst db = new Dexie('MoneyTrackerDB');\r\n\r\n// 定义数据库模式\r\ndb.version(1).stores({\r\n  transactions: '++id, type, amount, category, date, description',\r\n  categories: '++id, type, name'\r\n});\r\n\r\n// 定义交易类型常量\r\nexport const TRANSACTION_TYPES = {\r\n  INCOME: '收入',\r\n  EXPENSE: '支出'\r\n};\r\n\r\n// 预定义的收入类别\r\nexport const DEFAULT_INCOME_CATEGORIES = [\r\n  '工资', '奖金', '投资收益', '兼职', '礼金', '报销', '其他收入'\r\n];\r\n\r\n// 预定义的支出类别\r\nexport const DEFAULT_EXPENSE_CATEGORIES = [\r\n  '饮食', '住房', '交通', '购物', '娱乐', '医疗', '教育',\r\n  '旅游', '数码', '生活用品', '其他支出'\r\n];\r\n\r\n// 初始化类别数据\r\nexport const initCategories = async () => {\r\n  const count = await db.categories.count();\r\n  \r\n  if (count === 0) {\r\n    // 如果没有类别数据，添加默认类别\r\n    const categoriesToAdd = [\r\n      ...DEFAULT_INCOME_CATEGORIES.map(name => ({ \r\n        type: TRANSACTION_TYPES.INCOME, \r\n        name \r\n      })),\r\n      ...DEFAULT_EXPENSE_CATEGORIES.map(name => ({ \r\n        type: TRANSACTION_TYPES.EXPENSE, \r\n        name \r\n      }))\r\n    ];\r\n    \r\n    await db.categories.bulkAdd(categoriesToAdd);\r\n  }\r\n};\r\n\r\n// 在应用启动时初始化类别\r\ninitCategories();\r\n\r\n// 类别管理函数\r\nexport const getAllCategories = async () => {\r\n  return await db.categories.toArray();\r\n};\r\n\r\nexport const getCategoriesByType = async (type) => {\r\n  return await db.categories.where('type').equals(type).toArray();\r\n};\r\n\r\nexport const addCategory = async (category) => {\r\n  return await db.categories.add(category);\r\n};\r\n\r\nexport const updateCategory = async (id, name) => {\r\n  return await db.categories.update(id, { name });\r\n};\r\n\r\nexport const deleteCategory = async (id) => {\r\n  // 检查该类别是否被使用\r\n  const transactionCount = await db.transactions\r\n    .where('category')\r\n    .equals((await db.categories.get(id)).name)\r\n    .count();\r\n  \r\n  if (transactionCount > 0) {\r\n    throw new Error('此类别已被使用，无法删除');\r\n  }\r\n  \r\n  return await db.categories.delete(id);\r\n};\r\n\r\n// 数据库操作函数\r\nexport const addTransaction = async (transaction) => {\r\n  // 确保日期是Date对象\r\n  if (typeof transaction.date === 'string') {\r\n    transaction.date = new Date(transaction.date);\r\n  }\r\n  return await db.transactions.add(transaction);\r\n};\r\n\r\nexport const updateTransaction = async (id, changes) => {\r\n  // 确保日期是Date对象\r\n  if (changes.date && typeof changes.date === 'string') {\r\n    changes.date = new Date(changes.date);\r\n  }\r\n  return await db.transactions.update(id, changes);\r\n};\r\n\r\nexport const deleteTransaction = async (id) => {\r\n  return await db.transactions.delete(id);\r\n};\r\n\r\nexport const getAllTransactions = async () => {\r\n  return await db.transactions.toArray();\r\n};\r\n\r\nexport const getTransactionsByType = async (type) => {\r\n  return await db.transactions.where('type').equals(type).toArray();\r\n};\r\n\r\nexport const getTransactionsByDateRange = async (startDate, endDate) => {\r\n  return await db.transactions\r\n    .where('date')\r\n    .between(startDate, endDate)\r\n    .toArray();\r\n};\r\n\r\nexport const getTransactionById = async (id) => {\r\n  return await db.transactions.get(id);\r\n};\r\n\r\nexport default db; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}