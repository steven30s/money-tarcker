{"ast":null,"code":"import Dexie from 'dexie';\nconst db = new Dexie('MoneyTrackerDB');\n\n// Increment the version number to trigger a schema upgrade\ndb.version(2).stores({\n  transactions: '++id, type, amount, category, date, description',\n  categories: '++id, type, name'\n});\n\n// For any older versions, you might want to define upgrade paths,\n// but for this simple case, just creating the stores in the new version is enough.\ndb.version(1).stores({\n  transactions: '++id, type, amount, category, date, description'\n  // categories store did not exist in version 1\n});\nexport const TRANSACTION_TYPES = {\n  INCOME: '收入',\n  EXPENSE: '支出'\n};\nexport const DEFAULT_INCOME_CATEGORIES = ['工资', '奖金', '投资收益', '兼职', '礼金', '报销', '其他收入'];\nexport const DEFAULT_EXPENSE_CATEGORIES = ['饮食', '住房', '交通', '购物', '娱乐', '医疗', '教育', '旅游', '数码', '生活用品', '其他支出'];\nexport const initCategories = async () => {\n  try {\n    // Make sure the database is open before we interact with it.\n    await db.open();\n    const count = await db.categories.count();\n    if (count === 0) {\n      const categoriesToAdd = [...DEFAULT_INCOME_CATEGORIES.map(name => ({\n        type: TRANSACTION_TYPES.INCOME,\n        name\n      })), ...DEFAULT_EXPENSE_CATEGORIES.map(name => ({\n        type: TRANSACTION_TYPES.EXPENSE,\n        name\n      }))];\n      await db.categories.bulkAdd(categoriesToAdd);\n    }\n  } catch (error) {\n    console.error(\"Failed to initialize categories:\", error);\n    // This can happen if the db version is old. A page refresh after schema update usually fixes this.\n  }\n};\ninitCategories();\nexport const getAllCategories = () => db.categories.toArray();\nexport const getCategoriesByType = type => db.categories.where('type').equals(type).toArray();\nexport const addCategory = category => db.categories.add(category);\nexport const updateCategory = (id, name) => db.categories.update(id, {\n  name\n});\nexport const deleteCategory = async id => {\n  const categoryToDelete = await db.categories.get(id);\n  if (!categoryToDelete) {\n    console.warn(`Category with id ${id} not found, cannot delete.`);\n    return;\n  }\n  const transactionCount = await db.transactions.where('category').equals(categoryToDelete.name).count();\n  if (transactionCount > 0) {\n    throw new Error('此类别已被使用，无法删除');\n  }\n  return db.categories.delete(id);\n};\nexport const addTransaction = transaction => {\n  if (typeof transaction.date === 'string') {\n    transaction.date = new Date(transaction.date);\n  }\n  return db.transactions.add(transaction);\n};\nexport const updateTransaction = (id, changes) => {\n  if (changes.date && typeof changes.date === 'string') {\n    changes.date = new Date(changes.date);\n  }\n  return db.transactions.update(id, changes);\n};\nexport const deleteTransaction = id => db.transactions.delete(id);\nexport const getAllTransactions = () => db.transactions.toArray();\nexport const getTransactionsByType = type => db.transactions.where('type').equals(type).toArray();\nexport const getTransactionsByDateRange = (startDate, endDate) => {\n  return db.transactions.where('date').between(startDate, endDate).toArray();\n};\nexport const getTransactionById = id => db.transactions.get(id);\nexport default db;","map":{"version":3,"names":["Dexie","db","version","stores","transactions","categories","TRANSACTION_TYPES","INCOME","EXPENSE","DEFAULT_INCOME_CATEGORIES","DEFAULT_EXPENSE_CATEGORIES","initCategories","open","count","categoriesToAdd","map","name","type","bulkAdd","error","console","getAllCategories","toArray","getCategoriesByType","where","equals","addCategory","category","add","updateCategory","id","update","deleteCategory","categoryToDelete","get","warn","transactionCount","Error","delete","addTransaction","transaction","date","Date","updateTransaction","changes","deleteTransaction","getAllTransactions","getTransactionsByType","getTransactionsByDateRange","startDate","endDate","between","getTransactionById"],"sources":["D:/money-tracker/src/db.js"],"sourcesContent":["import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('MoneyTrackerDB');\r\n\r\n// Increment the version number to trigger a schema upgrade\r\ndb.version(2).stores({\r\n  transactions: '++id, type, amount, category, date, description',\r\n  categories: '++id, type, name'\r\n});\r\n\r\n// For any older versions, you might want to define upgrade paths,\r\n// but for this simple case, just creating the stores in the new version is enough.\r\ndb.version(1).stores({\r\n  transactions: '++id, type, amount, category, date, description',\r\n  // categories store did not exist in version 1\r\n});\r\n\r\n\r\nexport const TRANSACTION_TYPES = {\r\n  INCOME: '收入',\r\n  EXPENSE: '支出'\r\n};\r\n\r\nexport const DEFAULT_INCOME_CATEGORIES = [\r\n  '工资', '奖金', '投资收益', '兼职', '礼金', '报销', '其他收入'\r\n];\r\n\r\nexport const DEFAULT_EXPENSE_CATEGORIES = [\r\n  '饮食', '住房', '交通', '购物', '娱乐', '医疗', '教育',\r\n  '旅游', '数码', '生活用品', '其他支出'\r\n];\r\n\r\nexport const initCategories = async () => {\r\n  try {\r\n    // Make sure the database is open before we interact with it.\r\n    await db.open();\r\n    const count = await db.categories.count();\r\n    if (count === 0) {\r\n      const categoriesToAdd = [\r\n        ...DEFAULT_INCOME_CATEGORIES.map(name => ({ type: TRANSACTION_TYPES.INCOME, name })),\r\n        ...DEFAULT_EXPENSE_CATEGORIES.map(name => ({ type: TRANSACTION_TYPES.EXPENSE, name }))\r\n      ];\r\n      await db.categories.bulkAdd(categoriesToAdd);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to initialize categories:\", error);\r\n    // This can happen if the db version is old. A page refresh after schema update usually fixes this.\r\n  }\r\n};\r\n\r\ninitCategories();\r\n\r\nexport const getAllCategories = () => db.categories.toArray();\r\nexport const getCategoriesByType = (type) => db.categories.where('type').equals(type).toArray();\r\nexport const addCategory = (category) => db.categories.add(category);\r\nexport const updateCategory = (id, name) => db.categories.update(id, { name });\r\n\r\nexport const deleteCategory = async (id) => {\r\n  const categoryToDelete = await db.categories.get(id);\r\n  if (!categoryToDelete) {\r\n    console.warn(`Category with id ${id} not found, cannot delete.`);\r\n    return;\r\n  }\r\n  \r\n  const transactionCount = await db.transactions\r\n    .where('category').equals(categoryToDelete.name)\r\n    .count();\r\n  \r\n  if (transactionCount > 0) {\r\n    throw new Error('此类别已被使用，无法删除');\r\n  }\r\n  \r\n  return db.categories.delete(id);\r\n};\r\n\r\nexport const addTransaction = (transaction) => {\r\n  if (typeof transaction.date === 'string') {\r\n    transaction.date = new Date(transaction.date);\r\n  }\r\n  return db.transactions.add(transaction);\r\n};\r\n\r\nexport const updateTransaction = (id, changes) => {\r\n  if (changes.date && typeof changes.date === 'string') {\r\n    changes.date = new Date(changes.date);\r\n  }\r\n  return db.transactions.update(id, changes);\r\n};\r\n\r\nexport const deleteTransaction = (id) => db.transactions.delete(id);\r\nexport const getAllTransactions = () => db.transactions.toArray();\r\nexport const getTransactionsByType = (type) => db.transactions.where('type').equals(type).toArray();\r\nexport const getTransactionsByDateRange = (startDate, endDate) => {\r\n  return db.transactions.where('date').between(startDate, endDate).toArray();\r\n};\r\nexport const getTransactionById = (id) => db.transactions.get(id);\r\n\r\nexport default db;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}