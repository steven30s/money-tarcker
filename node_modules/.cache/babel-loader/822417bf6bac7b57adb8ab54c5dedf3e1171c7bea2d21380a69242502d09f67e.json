{"ast":null,"code":"import Dexie from 'dexie';\n\n// 创建数据库实例\nconst db = new Dexie('MoneyTrackerDB');\n\n// 定义数据库模式\ndb.version(1).stores({\n  transactions: '++id, type, amount, category, date, description'\n});\n\n// 定义交易类型常量\nexport const TRANSACTION_TYPES = {\n  INCOME: '收入',\n  EXPENSE: '支出'\n};\n\n// 预定义的收入类别\nexport const INCOME_CATEGORIES = ['工资', '奖金', '投资收益', '兼职', '礼金', '报销', '其他收入'];\n\n// 预定义的支出类别\nexport const EXPENSE_CATEGORIES = ['饮食', '住房', '交通', '购物', '娱乐', '医疗', '教育', '旅游', '数码', '生活用品', '其他支出'];\n\n// 数据库操作函数\nexport const addTransaction = async transaction => {\n  // 确保日期是Date对象\n  if (typeof transaction.date === 'string') {\n    transaction.date = new Date(transaction.date);\n  }\n  return await db.transactions.add(transaction);\n};\nexport const updateTransaction = async (id, changes) => {\n  // 确保日期是Date对象\n  if (changes.date && typeof changes.date === 'string') {\n    changes.date = new Date(changes.date);\n  }\n  return await db.transactions.update(id, changes);\n};\nexport const deleteTransaction = async id => {\n  return await db.transactions.delete(id);\n};\nexport const getAllTransactions = async () => {\n  return await db.transactions.toArray();\n};\nexport const getTransactionsByType = async type => {\n  return await db.transactions.where('type').equals(type).toArray();\n};\nexport const getTransactionsByDateRange = async (startDate, endDate) => {\n  return await db.transactions.where('date').between(startDate, endDate).toArray();\n};\nexport const getTransactionById = async id => {\n  return await db.transactions.get(id);\n};\nexport default db;","map":{"version":3,"names":["Dexie","db","version","stores","transactions","TRANSACTION_TYPES","INCOME","EXPENSE","INCOME_CATEGORIES","EXPENSE_CATEGORIES","addTransaction","transaction","date","Date","add","updateTransaction","id","changes","update","deleteTransaction","delete","getAllTransactions","toArray","getTransactionsByType","type","where","equals","getTransactionsByDateRange","startDate","endDate","between","getTransactionById","get"],"sources":["D:/money-tracker/src/db.js"],"sourcesContent":["import Dexie from 'dexie';\r\n\r\n// 创建数据库实例\r\nconst db = new Dexie('MoneyTrackerDB');\r\n\r\n// 定义数据库模式\r\ndb.version(1).stores({\r\n  transactions: '++id, type, amount, category, date, description'\r\n});\r\n\r\n// 定义交易类型常量\r\nexport const TRANSACTION_TYPES = {\r\n  INCOME: '收入',\r\n  EXPENSE: '支出'\r\n};\r\n\r\n// 预定义的收入类别\r\nexport const INCOME_CATEGORIES = [\r\n  '工资', '奖金', '投资收益', '兼职', '礼金', '报销', '其他收入'\r\n];\r\n\r\n// 预定义的支出类别\r\nexport const EXPENSE_CATEGORIES = [\r\n  '饮食', '住房', '交通', '购物', '娱乐', '医疗', '教育',\r\n  '旅游', '数码', '生活用品', '其他支出'\r\n];\r\n\r\n// 数据库操作函数\r\nexport const addTransaction = async (transaction) => {\r\n  // 确保日期是Date对象\r\n  if (typeof transaction.date === 'string') {\r\n    transaction.date = new Date(transaction.date);\r\n  }\r\n  return await db.transactions.add(transaction);\r\n};\r\n\r\nexport const updateTransaction = async (id, changes) => {\r\n  // 确保日期是Date对象\r\n  if (changes.date && typeof changes.date === 'string') {\r\n    changes.date = new Date(changes.date);\r\n  }\r\n  return await db.transactions.update(id, changes);\r\n};\r\n\r\nexport const deleteTransaction = async (id) => {\r\n  return await db.transactions.delete(id);\r\n};\r\n\r\nexport const getAllTransactions = async () => {\r\n  return await db.transactions.toArray();\r\n};\r\n\r\nexport const getTransactionsByType = async (type) => {\r\n  return await db.transactions.where('type').equals(type).toArray();\r\n};\r\n\r\nexport const getTransactionsByDateRange = async (startDate, endDate) => {\r\n  return await db.transactions\r\n    .where('date')\r\n    .between(startDate, endDate)\r\n    .toArray();\r\n};\r\n\r\nexport const getTransactionById = async (id) => {\r\n  return await db.transactions.get(id);\r\n};\r\n\r\nexport default db; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,EAAE,GAAG,IAAID,KAAK,CAAC,gBAAgB,CAAC;;AAEtC;AACAC,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;EACnBC,YAAY,EAAE;AAChB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,iBAAiB,GAAG;EAC/BC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAC/B,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAC7C;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAChC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACxC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAC3B;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,WAAW,IAAK;EACnD;EACA,IAAI,OAAOA,WAAW,CAACC,IAAI,KAAK,QAAQ,EAAE;IACxCD,WAAW,CAACC,IAAI,GAAG,IAAIC,IAAI,CAACF,WAAW,CAACC,IAAI,CAAC;EAC/C;EACA,OAAO,MAAMX,EAAE,CAACG,YAAY,CAACU,GAAG,CAACH,WAAW,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAOC,EAAE,EAAEC,OAAO,KAAK;EACtD;EACA,IAAIA,OAAO,CAACL,IAAI,IAAI,OAAOK,OAAO,CAACL,IAAI,KAAK,QAAQ,EAAE;IACpDK,OAAO,CAACL,IAAI,GAAG,IAAIC,IAAI,CAACI,OAAO,CAACL,IAAI,CAAC;EACvC;EACA,OAAO,MAAMX,EAAE,CAACG,YAAY,CAACc,MAAM,CAACF,EAAE,EAAEC,OAAO,CAAC;AAClD,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAOH,EAAE,IAAK;EAC7C,OAAO,MAAMf,EAAE,CAACG,YAAY,CAACgB,MAAM,CAACJ,EAAE,CAAC;AACzC,CAAC;AAED,OAAO,MAAMK,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,OAAO,MAAMpB,EAAE,CAACG,YAAY,CAACkB,OAAO,CAAC,CAAC;AACxC,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,IAAI,IAAK;EACnD,OAAO,MAAMvB,EAAE,CAACG,YAAY,CAACqB,KAAK,CAAC,MAAM,CAAC,CAACC,MAAM,CAACF,IAAI,CAAC,CAACF,OAAO,CAAC,CAAC;AACnE,CAAC;AAED,OAAO,MAAMK,0BAA0B,GAAG,MAAAA,CAAOC,SAAS,EAAEC,OAAO,KAAK;EACtE,OAAO,MAAM5B,EAAE,CAACG,YAAY,CACzBqB,KAAK,CAAC,MAAM,CAAC,CACbK,OAAO,CAACF,SAAS,EAAEC,OAAO,CAAC,CAC3BP,OAAO,CAAC,CAAC;AACd,CAAC;AAED,OAAO,MAAMS,kBAAkB,GAAG,MAAOf,EAAE,IAAK;EAC9C,OAAO,MAAMf,EAAE,CAACG,YAAY,CAAC4B,GAAG,CAAChB,EAAE,CAAC;AACtC,CAAC;AAED,eAAef,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}